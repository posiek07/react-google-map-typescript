{"version":3,"sources":["helpers/helper.ts","components/ArticleCard.tsx","components/ArticleList.tsx","components/Map.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["fetcher","input","init","a","fetch","res","json","ArticleCard","title","id","zoomToPoint","setSeen","seen","className","role","onClick","src","width","height","alt","ArticleList","selectedMarkerProducts","turnSeen","setTurnSeen","type","map","product","includes","Marker","children","key","lat","lng","Map","mapRef","center","zoom","clusters","mapChangeEvent","setZoomAndListFeatureHandler","setSelectedMarkerProducts","pointsLength","style","bootstrapURLKeys","process","defaultCenter","defaultZoom","yesIWantToUseGoogleMapApiInternals","onGoogleApiLoaded","current","onChange","bounds","cluster","geometry","coordinates","longitude","latitude","properties","isCluster","pointCount","point_count","markerId","App","useRef","useState","setBounds","setZoom","setCenter","useSWR","data","error","isValidating","useEffect","markers","points","marker","section","userId","user","category","status","parseFloat","location","getPoints","useSupercluster","options","radius","maxZoom","supercluster","previousState","filter","prevState","length","expansionZoom","Math","min","getClusterExpansionZoom","panTo","newSelectedProducts","getLeaves","Infinity","leave","nw","se","Boolean","window","hostname","match","require","config","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.64f62a6d.chunk.js","sourcesContent":["export const getPoints = (markers: any, turnSeen: boolean, seen: string[]) =>\n  markers.map(\n    (marker: {\n      id: any;\n      section: any;\n      user: { id: any };\n      status: any;\n      location: { longitude: string; latitude: string };\n    }) =>\n      turnSeen\n        ? // flilters seen artcile markers from the map\n          !seen.includes(marker.id) && {\n            type: marker.section,\n            properties: {\n              cluster: false,\n              markerId: marker.id,\n              userId: marker.user.id,\n              category: marker.status,\n              product: marker,\n            },\n            geometry: {\n              type: \"Point\",\n              coordinates: [\n                parseFloat(marker.location.longitude),\n                parseFloat(marker.location.latitude),\n              ],\n            },\n          }\n        : {\n            type: marker.section,\n            properties: {\n              cluster: false,\n              markerId: marker.id,\n              userId: marker.user.id,\n              category: marker.status,\n              product: marker,\n            },\n            geometry: {\n              type: \"Point\",\n              coordinates: [\n                parseFloat(marker.location.longitude),\n                parseFloat(marker.location.latitude),\n              ],\n            },\n          }\n  );\n\nexport const fetcher = async (\n  input: RequestInfo,\n  init: RequestInit,\n  ...args: any[]\n) => {\n  const res = await fetch(input, init);\n  return res.json();\n};\n","const ArticleCard = ({\n    title,\n    id,\n    zoomToPoint,\n    setSeen,\n    seen,\n}: {\n    title: string;\n    id: string;\n    zoomToPoint: () => void;\n    setSeen: () => void;\n    seen: boolean;\n}) => {\n    return (\n        <div\n            className=\"my-1 bg-blue-200 flex justify-between px-10\"\n            role=\"listitem\"\n        >\n            {/* We could create card component here that after click would open a modal with selected card state to display details */}\n            <h3 className=\"hover:underline cursor-pointer\" onClick={zoomToPoint}>\n                {title}\n            </h3>\n            <img\n                onClick={setSeen}\n                src=\"./seen.svg\"\n                width={30}\n                height={30}\n                alt={`product-card-button-${id}`}\n                className={`${seen ? \"opacity-40\" : \"opacity-100\"} cursor-pointer`}\n                role=\"button\"\n            />\n        </div>\n    );\n};\n\nexport default ArticleCard;\n","import ArticleCard from \"./ArticleCard\";\n\nconst ArticleList = ({\n  selectedMarkerProducts,\n  zoomToPoint,\n  setSeen,\n  seen,\n  turnSeen,\n  setTurnSeen,\n}: {\n  selectedMarkerProducts: any[];\n  zoomToPoint: (product: any) => void;\n  setSeen: (product: any) => void;\n  seen: string[];\n  turnSeen: boolean;\n  setTurnSeen: () => void;\n}) => {\n  return (\n    ///* that could be also some nice card list */\n    <div className=\"flex flex-col flex-1 overflow-auto h-[50vh] max-h-[50vh] md:min-h-[100vh]\">\n      <button\n        type=\"button\"\n        onClick={() => setTurnSeen()}\n        className=\"w-100 justify-center bg-yellow-600 rounded-full\"\n      >\n        Seen {!turnSeen ? \"ON\" : \"OFF\"} the map\n      </button>\n      <div className=\"flex flex-col\" role=\"list\">\n        {!!selectedMarkerProducts &&\n          selectedMarkerProducts.map(\n            (product: {\n              location: { latitude: any; longitude: any };\n              title: string;\n              id: any;\n            }) => (\n              <ArticleCard\n                key={product.id}\n                id={product.id}\n                title={product.title}\n                zoomToPoint={() => zoomToPoint(product)}\n                setSeen={() => setSeen(product)}\n                seen={seen.includes(product.id)}\n              />\n            )\n          )}\n      </div>\n    </div>\n  );\n};\n\nexport default ArticleList;\n","import React, { MutableRefObject } from \"react\";\nimport GoogleMapReact, { Coords } from \"google-map-react\";\nimport { Location } from \"../App\";\n\nconst Marker = ({\n    children,\n    key,\n    lat,\n    lng,\n}: {\n    children: any;\n    key: string;\n    lat: number;\n    lng: number;\n}) => children;\n\nconst Map = ({\n    mapRef,\n    center,\n    zoom,\n    clusters,\n    seen,\n    mapChangeEvent,\n    setZoomAndListFeatureHandler,\n    setSelectedMarkerProducts,\n    pointsLength,\n}: {\n    mapRef: MutableRefObject<any>;\n    center: Coords | undefined;\n    zoom: number;\n    clusters: any[];\n    seen: any[];\n    mapChangeEvent: (zoom: number, bounds: any, center: Coords) => void;\n    setZoomAndListFeatureHandler: (cluster: any) => void;\n    setSelectedMarkerProducts: (cluster: Location) => void;\n    pointsLength: number;\n}) => {\n    return (\n        <div\n            className=\"flex flex-1 h-[50vh] min-h-[50vh] md:min-h-[100vh]\"\n            style={{ width: \"100%\" }}\n        >\n            <GoogleMapReact\n                // install dotenv and write REACT_APP_MAP_TOKEN={your api key} in .env file in root folder OR just copy and paste your GoogleMap API key\n                bootstrapURLKeys={{ key: process.env.REACT_APP_MAP_TOKEN!! }}\n                defaultCenter={{ lat: 51.7876, lng: -3.757171 }}\n                defaultZoom={7}\n                yesIWantToUseGoogleMapApiInternals\n                onGoogleApiLoaded={({ map }) => {\n                    mapRef.current = map;\n                }}\n                center={center}\n                onChange={({ zoom, bounds, center }) =>\n                    mapChangeEvent(zoom, bounds, center)\n                }\n                zoom={zoom}\n            >\n                {clusters.map((cluster: any) => {\n                    const [longitude, latitude] = cluster.geometry.coordinates;\n                    const { cluster: isCluster, point_count: pointCount } =\n                        cluster.properties;\n                    if (isCluster) {\n                        return (\n                            <Marker\n                                key={`cluster-${cluster.id}`}\n                                lat={latitude}\n                                lng={longitude}\n                            >\n                                <div\n                                    className=\"flex bg-red-700 rounded-full items-center justify-center\"\n                                    style={{\n                                        width: `${10 + (pointCount / pointsLength) * 70}px`,\n                                        height: `${10 + (pointCount / pointsLength) * 70}px`,\n                                    }}\n                                    onClick={() => setZoomAndListFeatureHandler(cluster)}\n                                    id={`cluster-${cluster.id}`}\n                                >\n                                    {pointCount}\n                                </div>\n                            </Marker>\n                        );\n                    }\n                    return (\n                        <Marker\n                            key={`place-${cluster.properties.markerId}`}\n                            lat={latitude}\n                            lng={longitude}\n                        >\n                            <button\n                                className={`${seen.includes(cluster.properties.markerId)\n                                        ? \"opacity-40\"\n                                        : \"opacity-100\"\n                                    }`}\n                                onClick={() =>\n                                    setSelectedMarkerProducts({ latitude, longitude })\n                                }\n                            >\n                                <img\n                                    src={\n                                        cluster.type === \"product\"\n                                            ? \"./hang-clothes.svg\"\n                                            : \"./diet.svg\"\n                                    }\n                                    width={30}\n                                    height={30}\n                                    alt={`point-${cluster.properties.markerId}`}\n                                />\n                            </button>\n                        </Marker>\n                    );\n                })}\n            </GoogleMapReact>\n        </div>\n    );\n};\n\nexport default Map;\n","import { useEffect, useRef, useState } from \"react\";\nimport useSWR from \"swr\";\nimport { Coords } from \"google-map-react\";\nimport useSupercluster from \"use-supercluster\";\nimport { BBox } from \"geojson\";\nimport { fetcher, getPoints } from \"./helpers/helper\";\nimport ArticleList from \"./components/ArticleList\";\nimport Map from \"./components/Map\";\n\nexport interface Location {\n  latitude: number;\n  longitude: number;\n}\n\nfunction App() {\n  // STATE VALUES\n  const mapRef = useRef<null | any>();\n  const [bounds, setBounds] = useState<BBox>();\n  const [zoom, setZoom] = useState(10);\n  const [center, setCenter] = useState<Coords>();\n  const [selectedMarkerProducts, setSelectedMarkerProducts] = useState<any[]>(\n    []\n  );\n  const [seen, setSeen] = useState<any[]>([]);\n  const [turnSeen, setTurnSeen] = useState<boolean>(true);\n\n  const { data, error, isValidating } = useSWR(\n    \"https://s3-eu-west-1.amazonaws.com/olio-staging-images/developer/test-articles-v4.json\",\n    { fetcher }\n  );\n\n  useEffect(() => {\n    // fetching all list for the testing needs or delete useEffect and render only list from selected point or cluster\n    setSelectedMarkerProducts(data);\n  }, [data]);\n\n  const markers = data && !error ? data : [];\n\n  const points = getPoints(markers, turnSeen, seen);\n\n  const { clusters, supercluster } = useSupercluster({\n    points,\n    bounds,\n    zoom,\n    options: { radius: 100, maxZoom: 22 },\n  });\n\n  // HANDLERS FUNCTIONS\n\n  const mapChangeEventHandler = (zoom: number, bounds: any, center: Coords) => {\n    setCenter(center);\n    setZoom(zoom);\n    setBounds([bounds.nw.lng, bounds.se.lat, bounds.se.lng, bounds.nw.lat]);\n  };\n\n  const setZoomAndListFeatureHandler = (cluster: any) => {\n    const [longitude, latitude] = cluster.geometry.coordinates;\n    const expansionZoom = Math.min(\n      supercluster.getClusterExpansionZoom(cluster.id),\n      20\n    );\n    mapRef.current.setZoom(expansionZoom);\n    mapRef.current.panTo({ lat: latitude, lng: longitude });\n    let leaves = supercluster.getLeaves(cluster.id, Infinity, 0);\n    const newSelectedProducts = leaves.map(\n      (leave: any) => leave.properties.product\n    );\n    setSelectedMarkerProducts(newSelectedProducts);\n  };\n\n  const setSelectedMarkerProductsHandler = ({\n    latitude,\n    longitude,\n  }: {\n    latitude: number;\n    longitude: number;\n  }) => {\n    setSelectedMarkerProducts(\n      markers.filter(\n        (marker: { location: Location }) =>\n          marker.location.latitude === latitude &&\n          marker.location.longitude === longitude\n      )\n    );\n  };\n\n  const setSeenHandler = (product: any) =>\n    setSeen((previousState) => {\n      if (previousState.includes(product.id)) {\n        return previousState.filter((id) => id !== product.id);\n      }\n      return [...previousState, product.id];\n    });\n\n  const zoomToPointHandler = (product: any) => {\n    setCenter({\n      lat: product.location.latitude,\n      lng: product.location.longitude,\n    });\n    setZoom(20);\n  };\n\n  const setTurnSeenHandler = () => setTurnSeen((prevState) => !prevState);\n\n  if (isValidating) {\n    return <h1>LOADING</h1>;\n  }\n\n  return (\n    <div className=\"flex flex-col md:flex-row\">\n      <ArticleList\n        seen={seen}\n        selectedMarkerProducts={selectedMarkerProducts}\n        setSeen={setSeenHandler}\n        zoomToPoint={zoomToPointHandler}\n        setTurnSeen={setTurnSeenHandler}\n        turnSeen={turnSeen}\n      />\n      <Map\n        pointsLength={points.length}\n        center={center}\n        clusters={clusters}\n        mapRef={mapRef}\n        seen={seen}\n        setZoomAndListFeatureHandler={setZoomAndListFeatureHandler}\n        mapChangeEvent={mapChangeEventHandler}\n        zoom={zoom}\n        setSelectedMarkerProducts={setSelectedMarkerProductsHandler}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nrequire(\"dotenv\").config();\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}